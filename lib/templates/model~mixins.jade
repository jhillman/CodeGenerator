mixin member(member)
 - if (gson)
   - if (typeof(member.serializedName) !== 'undefined')
     |     @SerializedName("#{member.serializedName}") 
     | 
   - else
     |     @SerializedName("#{member.name}") 
     | 
 |    private !{modelMap[member.name + member.class] || enumMap[member.class] || member.type} m#{camelCase(capitalize(member.name))}; 
 | 

mixin pojoSetter(member)
 |     public final void set#{camelCase(capitalize(member.name))}(!{modelMap[member.name + member.class] || enumMap[member.class] || member.type} #{camelCase(member.name)}) {
 |         m#{camelCase(capitalize(member.name))} = #{camelCase(member.name)};
 |     }
 | 

mixin setter(member)
 |     public final void set#{camelCase(capitalize(member.name))}(!{modelMap[member.name + member.class] || enumMap[member.class] || member.type} #{camelCase(member.name)}) {
 |         m#{camelCase(capitalize(member.name))} = #{camelCase(member.name)};
 |         mValues.put(
 +getTableValue(member)
 - if (member.type == 'Date')
  | , #{camelCase(member.name)} != null ? #{camelCase(member.name)}.getTime() : null);
 - else if (member.type == 'enum')
  | , #{camelCase(member.name)} != null ? #{camelCase(member.name)}.name() : null);
 - else if (member.type == 'class' || member.type == 'class[]')
  | , mGson.toJson(#{camelCase(member.name)}));
 - else
  | , #{camelCase(member.name)});
 | 
 |     }
 | 

mixin getter(member)
 |     public !{modelMap[member.name + member.class] || enumMap[member.class] || member.type} get#{camelCase(capitalize(member.name))}() {
 |         return m#{camelCase(capitalize(member.name))};
 |     }
 | 

mixin constructorParameter(member)
 | !{modelMap[member.name + member.class] || enumMap[member.class] || member.type} #{camelCase(member.name)}

mixin constructorAssignment(member)
 |         set#{camelCase(capitalize(member.name))}(#{camelCase(member.name)});
 | 

mixin comma(member)
 | , 

mixin constructors()
 | 
 each constructor in constructors
   | 
   |     public #{name}(
   each member, i in constructor.members
     +constructorParameter(member)
     if i < constructor.members.length - 1
       +comma()
   | ) {
   each member, i in constructor.members
     +constructorAssignment(member)
   |    } 
 | 
 | 

mixin getTableValue(member)
 | #{capitalize(name)}Table.#{upperCase(member.name)}

mixin getTableValueWithPrefix(member)
 | prefix + #{capitalize(name)}Table.#{upperCase(member.name)}

mixin setContentValues(member)
 |        if (fields == null || fields.contains(
 +getTableValueWithPrefix(member)
 |)) {
 | 
 - if (member.type === 'boolean')
  |            set#{camelCase(capitalize(member.name))}(!cursor.isNull(cursor.getColumnIndex(
  +getTableValueWithPrefix(member)
  | )) && cursor.getInt(cursor.getColumnIndex(
  +getTableValueWithPrefix(member)
  | )) != 0); 
  | 
 - else if (member.type === 'enum')
  |            set#{camelCase(capitalize(member.name))}(#{enumMap[member.class]}.valueOf(cursor.getString(cursor.getColumnIndex(
  +getTableValueWithPrefix(member)
  | )))); 
  | 
 - else if (member.type === 'byte[]')
  |            set#{camelCase(capitalize(member.name))}(cursor.getBlob(cursor.getColumnIndex(
  +getTableValueWithPrefix(member)
  | ))); 
  | 
 - else if (member.type === 'Date')
  |            set#{camelCase(capitalize(member.name))}(cursor.isNull(cursor.getColumnIndex(
  +getTableValueWithPrefix(member)
  | )) ? null : new Date(cursor.getLong(cursor.getColumnIndex(
  +getTableValueWithPrefix(member)
  | )))); 
  | 
 - else if (member.type === 'class')
  |            set#{camelCase(capitalize(member.name))}(mGson.fromJson(cursor.getString(cursor.getColumnIndex(
  +getTableValueWithPrefix(member)
  | )), !{modelMap[member.name + member.class]}.class)); 
  | 
 - else if (member.type === 'class[]')
  |            set#{camelCase(capitalize(member.name))}(mGson.fromJson(cursor.getString(cursor.getColumnIndex(
  +getTableValueWithPrefix(member)
  | )), new TypeToken<!{modelMap[member.name + member.class]}>(){}.getType())); 
  | 
 - else
  |            set#{camelCase(capitalize(member.name))}(cursor.get#{capitalize(member.type)}(cursor.getColumnIndex(
  +getTableValueWithPrefix(member)
  | ))); 
  | 
 |        } 
 | 

mixin fromParcel(member)
 - if (member.type === 'boolean')
  |         set#{camelCase(capitalize(member.name))}(parcel.readInt() == 1); 
  | 
 - else if (member.type === 'enum')
  |         set#{camelCase(capitalize(member.name))}(#{enumMap[member.class]}.valueOf(parcel.readString())); 
  | 
 - else if (member.type === 'byte[]')
  |         int #{camelCase(member.name)}Length = parcel.readInt();
  |         if (#{camelCase(member.name)}Length >= 0) {
  |             byte[] #{camelCase(member.name)} = new byte[#{camelCase(member.name)}Length];
  |             parcel.readByteArray(#{camelCase(member.name)});
  |             set#{camelCase(capitalize(member.name))}(#{camelCase(member.name)}); 
  |         }
  | 
 - else if (member.type === 'Date')
  |         long #{camelCase(member.name)}Time = parcel.readLong();
  |         if (#{camelCase(member.name)}Time >= 0) {
  |             set#{camelCase(capitalize(member.name))}(new Date(#{camelCase(member.name)}Time)); 
  |         }
  | 
 - else if (member.type === 'class')
  - if (member.parcelable)
    |         #{modelMap[member.name + member.class]} #{camelCase(member.name)} = parcel.readParcelable(#{modelMap[member.name + member.class]}.class.getClassLoader());
    |         set#{camelCase(capitalize(member.name))}(#{camelCase(member.name)}); 
    | 
  - else if (member.serializable)
    |         #{modelMap[member.name + member.class]} #{camelCase(member.name)} = (#{modelMap[member.name + member.class]})parcel.readSerializable();
    |         set#{camelCase(capitalize(member.name))}(#{camelCase(member.name)}); 
    | 
 - else if (member.type === 'class[]')
  - if (member.parcelable)
    |         Array!{modelMap[member.name + member.class]} #{camelCase(member.name)} = parcel.createTypedArrayList(#{modelNameMap[member.class]}.CREATOR);
    |         set#{camelCase(capitalize(member.name))}(#{camelCase(member.name)}); 
    | 
  - else if (member.serializable)
    |         int #{camelCase(member.name)}Count = parcel.readInt();
    |         if (#{camelCase(member.name)}Count >= 0) {
    |             !{modelMap[member.name + member.class]} #{camelCase(member.name)} = new Array!{modelMap[member.name + member.class]}();
    |             
    |             for (int i = 0; i < #{camelCase(member.name)}Count; i++) {
    |                 #{camelCase(member.name)}.add((#{modelNameMap[member.class]})parcel.readSerializable());
    |             }
    | 
    |             set#{camelCase(capitalize(member.name))}(#{camelCase(member.name)});
    |         }
    | 
 - else
  |         set#{camelCase(capitalize(member.name))}(parcel.read#{capitalize(member.type)}()); 
  | 

mixin toParcel(member)
 - if (member.type === 'boolean')
  |         parcel.writeInt(get#{camelCase(capitalize(member.name))}() ? 1 : 0); 
  | 
 - else if (member.type == 'enum')
  |         parcel.writeString(get#{camelCase(capitalize(member.name))}().name()); 
  | 
 - else if (member.type == 'byte[]')
  |         if (get#{camelCase(capitalize(member.name))}() != null) {
  |             parcel.writeInt(get#{camelCase(capitalize(member.name))}().length);
  |             parcel.writeByteArray(get#{camelCase(capitalize(member.name))}()); 
  |         } else {
  |             parcel.writeInt(-1);
  |         }
  | 
 - else if (member.type == 'Date')
  |         if (get#{camelCase(capitalize(member.name))}() != null) {
  |             parcel.writeLong(get#{camelCase(capitalize(member.name))}().getTime());
  |         } else {
  |             parcel.writeInt(-1);
  |         }
  | 
  | 
 - else if (member.type == 'class')
  - if (member.parcelable)
    |         parcel.writeParcelable(get#{camelCase(capitalize(member.name))}(), flags);
    | 
  - else if (member.serializable)
    |         parcel.writeSerializable(get#{camelCase(capitalize(member.name))}());
    | 
 - else if (member.type == 'class[]')
  - if (member.parcelable)
    |         parcel.writeTypedList(get#{camelCase(capitalize(member.name))}());
    | 
  - else if (member.serializable)
    |         if (get#{camelCase(capitalize(member.name))}() == null) {
    |             parcel.writeInt(-1);
    |         } else {
    |             parcel.writeInt(get#{camelCase(capitalize(member.name))}().size());
    | 
    |             for (Serializable serializable : get#{camelCase(capitalize(member.name))}()) {
    |                 parcel.writeSerializable(serializable);
    |             }
    |         }
    | 
 - else
  |         parcel.write#{capitalize(member.type)}(get#{camelCase(capitalize(member.name))}()); 
  | 

mixin importEnum(enumName)
 | import #{enumName};
 | 

mixin importModel(modelName)
 | import #{modelName};
 | 
