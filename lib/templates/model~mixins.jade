mixin member(member)
 - if (gson && !member.noGson)
   |     @SerializedName("#{typeof(member.serializedName) !== 'undefined' ? member.serializedName : member.name}") 
   | 
 - if (simpleXml)
   - if (member.type == 'class[]')
     |     @SerializedName("#{typeof(member.serializedName) !== 'undefined' ? member.serializedName : member.name}") 
     |     @ElementList(entry = "#{member.serializedName || member.name}", inline=#{member.inline ? true : false}) 
     | 
   - else
     - if ((member.prefix || member.reference) && member.path)
       |     @SerializedName("#{typeof(member.serializedName) !== 'undefined' ? member.serializedName : member.name}") 
       |     @Namespace(#{(member.prefix ? 'prefix' : 'reference')}="#{member.prefix || member.reference}") 
       |     @Path("#{member.path}")
       |     @#{member.attribute ? 'Attribute' : 'Element'}#{member.type == 'class[]' ? 'List' : ''}(name = "#{member.serializedName || member.name}", required = #{member.hasOwnProperty('required') ? member.required : true}) 
       | 
     - else if (member.prefix || member.reference)
       |     @SerializedName("#{typeof(member.serializedName) !== 'undefined' ? member.serializedName : member.name}") 
       |     @Namespace(#{(member.prefix ? 'prefix' : 'reference')}="#{member.prefix || member.reference}") 
       |     @#{member.attribute ? 'Attribute' : 'Element'}#{member.type == 'class[]' ? 'List' : ''}(name = "#{member.serializedName || member.name}", required = #{member.hasOwnProperty('required') ? member.required : true}) 
       | 
     - else if (member.path)
       |     @SerializedName("#{typeof(member.serializedName) !== 'undefined' ? member.serializedName : member.name}") 
       |     @Path("#{member.path}")
       |     @#{member.attribute ? 'Attribute' : 'Element'}#{member.type == 'class[]' ? 'List' : ''}(name = "#{member.serializedName || member.name}", required = #{member.hasOwnProperty('required') ? member.required : true}) 
       | 
     - else 
       |     @SerializedName("#{typeof(member.serializedName) !== 'undefined' ? member.serializedName : member.name}") 
       |     @#{member.attribute ? 'Attribute' : 'Element'}#{member.type == 'class[]' ? 'List' : ''}(name = "#{member.serializedName || member.name}", required = #{member.hasOwnProperty('required') ? member.required : true}) 
       | 
 - if (member.noGson)
   |    private transient !{modelMap[member.name + member.class] || enumMap[member.class] || member.type} m#{camelCase(capitalize(member.name))}; 
 - else
   |    private !{modelMap[member.name + member.class] || enumMap[member.class] || member.type} m#{camelCase(capitalize(member.name))}; 
 | 
 | 

mixin pojoSetter(member)
 |     public final void set#{camelCase(capitalize(member.name))}(!{modelMap[member.name + member.class] || enumMap[member.class] || member.type} #{camelCase(member.name)}) {
 |         m#{camelCase(capitalize(member.name))} = #{camelCase(member.name)};
 |     }
 | 

mixin setter(member)
 |     public final void set#{camelCase(capitalize(member.name))}(!{modelMap[member.name + member.class] || enumMap[member.class] || member.type} #{camelCase(member.name)}) {
 |         m#{camelCase(capitalize(member.name))} = #{camelCase(member.name)};
 |         mValues.put(
 +getTableValue(member)
 - if (member.type == 'Date')
  | , #{camelCase(member.name)} != null ? #{camelCase(member.name)}.getTime() : null);
 - else if (member.type == 'enum')
  | , #{camelCase(member.name)} != null ? #{camelCase(member.name)}.name() : null);
 - else if (member.type == 'class' || member.type == 'class[]')
  | , mGson.toJson(#{camelCase(member.name)}));
 - else
  | , #{camelCase(member.name)});
 | 
 |     }
 | 

mixin getter(member)
 |     public !{modelMap[member.name + member.class] || enumMap[member.class] || member.type} get#{camelCase(capitalize(member.name))}() {
 |         return m#{camelCase(capitalize(member.name))};
 |     }
 | 

mixin constructorParameter(member)
 | !{modelMap[member.name + member.class] || enumMap[member.class] || member.type} #{camelCase(member.name)}

mixin constructorAssignment(member)
 |         set#{camelCase(capitalize(member.name))}(#{camelCase(member.name)});
 | 

mixin comma(member)
 | , 

mixin constructors()
 | 
 each constructor in constructors
   | 
   |     public #{name}(
   each member, i in constructor.members
     +constructorParameter(member)
     if i < constructor.members.length - 1
       +comma()
   | ) {
   each member, i in constructor.members
     +constructorAssignment(member)
   |    } 
 | 
 | 

mixin getTableValue(member)
 | #{capitalize(name)}Table.#{upperCase(member.name)}

mixin getTableValueWithPrefix(member)
 | prefix + #{capitalize(name)}Table.#{upperCase(member.name)}

mixin setContentValues(member)
 |        if (shouldSet(cursor, fields, 
 +getTableValueWithPrefix(member)
 |)) {
 | 
 - if (member.type === 'boolean')
  |            set#{camelCase(capitalize(member.name))}(cursor.getInt(cursor.getColumnIndex(
  +getTableValueWithPrefix(member)
  | )) != 0); 
  | 
 - else if (member.type === 'enum')
  |            String value = cursor.getString(cursor.getColumnIndex(
  +getTableValueWithPrefix(member)
  | )); 
  |             for (#{enumMap[member.class]} enumValue : #{enumMap[member.class]}.values()) {
  |                 if (enumValue.toString().equals(value)) { 
  |                     set#{camelCase(capitalize(member.name))}(#{enumMap[member.class]}.valueOf(value)); 
  |                     break;
  |                 }
  |             }
  | 
 - else if (member.type === 'byte[]')
  |            set#{camelCase(capitalize(member.name))}(cursor.getBlob(cursor.getColumnIndex(
  +getTableValueWithPrefix(member)
  | ))); 
  | 
 - else if (member.type === 'Date')
  |            set#{camelCase(capitalize(member.name))}(new Date(cursor.getLong(cursor.getColumnIndex(
  +getTableValueWithPrefix(member)
  | )))); 
  | 
 - else if (member.type === 'class')
  |            set#{camelCase(capitalize(member.name))}(mGson.fromJson(cursor.getString(cursor.getColumnIndex(
  +getTableValueWithPrefix(member)
  | )), !{modelMap[member.name + member.class]}.class)); 
  | 
 - else if (member.type === 'class[]')
  |            set#{camelCase(capitalize(member.name))}((!{modelMap[member.name + member.class]}) mGson.fromJson(cursor.getString(cursor.getColumnIndex(
  +getTableValueWithPrefix(member)
  | )), new TypeToken<!{modelMap[member.name + member.class]}>(){}.getType())); 
  | 
 - else
  |            set#{camelCase(capitalize(member.name))}(cursor.get#{capitalize(member.type)}(cursor.getColumnIndex(
  +getTableValueWithPrefix(member)
  | ))); 
  | 
 |        } 
 | 

mixin fromParcel(member)
 - if (member.type === 'boolean')
  |         set#{camelCase(capitalize(member.name))}(parcel.readInt() == 1); 
  | 
 - else if (member.type === 'enum')
  |         String #{camelCase(member.name)}String = parcel.readString();
  |         if (#{camelCase(member.name)}String != null) {
  |             set#{camelCase(capitalize(member.name))}(#{enumMap[member.class]}.valueOf(#{camelCase(member.name)}String)); 
  |         }
  | 
 - else if (member.type === 'byte[]')
  |         int #{camelCase(member.name)}Length = parcel.readInt();
  |         if (#{camelCase(member.name)}Length >= 0) {
  |             byte[] #{camelCase(member.name)} = new byte[#{camelCase(member.name)}Length];
  |             parcel.readByteArray(#{camelCase(member.name)});
  |             set#{camelCase(capitalize(member.name))}(#{camelCase(member.name)}); 
  |         }
  | 
 - else if (member.type === 'Date')
  |         long #{camelCase(member.name)}Time = parcel.readLong();
  |         if (#{camelCase(member.name)}Time >= 0) {
  |             set#{camelCase(capitalize(member.name))}(new Date(#{camelCase(member.name)}Time)); 
  |         }
  | 
 - else if (member.type === 'class')
  - if (member.parcelable)
    |         #{modelMap[member.name + member.class]} #{camelCase(member.name)} = parcel.readParcelable(#{modelMap[member.name + member.class]}.class.getClassLoader());
    |         set#{camelCase(capitalize(member.name))}(#{camelCase(member.name)}); 
    | 
  - else if (member.serializable)
    |         #{modelMap[member.name + member.class]} #{camelCase(member.name)} = (#{modelMap[member.name + member.class]})parcel.readSerializable();
    |         set#{camelCase(capitalize(member.name))}(#{camelCase(member.name)}); 
    | 
 - else if (member.type === 'class[]')
  - if (member.parcelable)
    |         Array!{modelMap[member.name + member.class]} #{camelCase(member.name)} = parcel.createTypedArrayList(#{modelNameMap[member.class]}.CREATOR);
    |         set#{camelCase(capitalize(member.name))}(#{camelCase(member.name)}); 
    | 
  - else if (member.serializable)
    |         int #{camelCase(member.name)}Count = parcel.readInt();
    |         if (#{camelCase(member.name)}Count >= 0) {
    |             !{modelMap[member.name + member.class]} #{camelCase(member.name)} = new Array!{modelMap[member.name + member.class]}();
    |             
    |             for (int i = 0; i < #{camelCase(member.name)}Count; i++) {
    |                 #{camelCase(member.name)}.add((#{modelNameMap[member.class]})parcel.readSerializable());
    |             }
    | 
    |             set#{camelCase(capitalize(member.name))}(#{camelCase(member.name)});
    |         }
    | 
 - else
  |         set#{camelCase(capitalize(member.name))}(parcel.read#{capitalize(member.type)}()); 
  | 

mixin toParcel(member)
 - if (member.type === 'boolean')
  |         parcel.writeInt(get#{camelCase(capitalize(member.name))}() ? 1 : 0); 
  | 
 - else if (member.type == 'enum')
  |         parcel.writeString(get#{camelCase(capitalize(member.name))}() != null ? get#{camelCase(capitalize(member.name))}().name() : null); 
  | 
 - else if (member.type == 'byte[]')
  |         if (get#{camelCase(capitalize(member.name))}() != null) {
  |             parcel.writeInt(get#{camelCase(capitalize(member.name))}().length);
  |             parcel.writeByteArray(get#{camelCase(capitalize(member.name))}()); 
  |         } else {
  |             parcel.writeInt(-1);
  |         }
  | 
 - else if (member.type == 'Date')
  |         if (get#{camelCase(capitalize(member.name))}() != null) {
  |             parcel.writeLong(get#{camelCase(capitalize(member.name))}().getTime());
  |         } else {
  |             parcel.writeInt(-1);
  |         }
  | 
  | 
 - else if (member.type == 'class')
  - if (member.parcelable)
    |         parcel.writeParcelable(get#{camelCase(capitalize(member.name))}(), flags);
    | 
  - else if (member.serializable)
    |         parcel.writeSerializable(get#{camelCase(capitalize(member.name))}());
    | 
 - else if (member.type == 'class[]')
  - if (member.parcelable)
    |         parcel.writeTypedList(get#{camelCase(capitalize(member.name))}());
    | 
  - else if (member.serializable)
    |         if (get#{camelCase(capitalize(member.name))}() == null) {
    |             parcel.writeInt(-1);
    |         } else {
    |             parcel.writeInt(get#{camelCase(capitalize(member.name))}().size());
    | 
    |             for (Serializable serializable : get#{camelCase(capitalize(member.name))}()) {
    |                 parcel.writeSerializable(serializable);
    |             }
    |         }
    | 
 - else
  |         parcel.write#{capitalize(member.type)}(get#{camelCase(capitalize(member.name))}()); 
  | 

mixin importEnum(enumName)
 | import #{enumName};
 | 

mixin importModel(modelName)
 | import !{modelName};
 | 

mixin namespace(namespace)
 | @Namespace(prefix="#{namespace.prefix}", reference="#{namespace.reference}")

mixin imports(table)
 - if (parcelable)
   | import android.os.Parcel;
   | import android.os.Parcelable;
   | 
 - if (importSerializable)
   | import java.io.Serializable;
   | 
 | 
 - if (gson)
   - if (classLists)
     | import com.google.gson.Gson;
     | import com.google.gson.annotations.SerializedName;
     | import com.google.gson.reflect.TypeToken;
     | import com.google.gson.TypeAdapter;
     | import com.google.gson.reflect.TypeToken;
     | import com.google.gson.stream.JsonReader;
     | import com.google.gson.stream.JsonToken;
     | import com.google.gson.stream.JsonWriter;
     | import java.io.IOException;
     | import com.google.gson.GsonBuilder;
     | import com.chatbooks.model.ModelAdapterFactory;
     | 
   - else if (classes)
     | import com.google.gson.Gson;
     | import com.google.gson.annotations.SerializedName;
     | import com.google.gson.TypeAdapter;
     | import com.google.gson.reflect.TypeToken;
     | import com.google.gson.stream.JsonReader;
     | import com.google.gson.stream.JsonToken;
     | import com.google.gson.stream.JsonWriter;
     | import java.io.IOException;
     | import com.google.gson.GsonBuilder;
     | import com.chatbooks.model.ModelAdapterFactory;
     | 
   - else 
     | import com.google.gson.Gson;
     | import com.google.gson.annotations.SerializedName;
     | import com.google.gson.TypeAdapter;
     | import com.google.gson.reflect.TypeToken;
     | import com.google.gson.stream.JsonReader;
     | import com.google.gson.stream.JsonToken;
     | import com.google.gson.stream.JsonWriter;
     | import java.io.IOException;
     | import com.google.gson.GsonBuilder;
     | import com.chatbooks.model.ModelAdapterFactory;
     | 
  - if (simpleXml) 
    | import org.simpleframework.xml.*;
    | import com.google.gson.annotations.SerializedName;
    | 
    - if (table && (classes || classLists))
      | import com.google.gson.Gson;
      | import com.google.gson.reflect.TypeToken;
      | 
 each enumName in enums
   +importEnum(enumName)
 | 
 each modelName in models
   +importModel(modelName)
 | 
 - if (importDate && importLists)
  | import java.util.ArrayList;
  | import java.util.Date;
  | import java.util.List;
  | 
 - else if (importLists)
  | import java.util.ArrayList;
  | import java.util.List;
  | 
 - else if (importDate)
  | import java.util.Date;
  | 

mixin typeAdapter(name, types, members)
  | 
  |     public static final class GsonTypeAdapter extends TypeAdapter<#{name}> {
  each type in types
    |         private final TypeAdapter<!{type.type}> m#{type.name}Adapter; 
    | 
  | 
  |         public GsonTypeAdapter(Gson gson) {
  each type in types
    |             m#{type.name}Adapter = gson.getAdapter(!{type.isList ? 'new TypeToken<' + type.type + '>(){}' : type.name + '.class'});
    | 
  |        }
  | 
  |         @Override
  |         public #{name} read(JsonReader jsonReader) throws IOException {
  |             #{name} json#{name} = new #{name}();
  |             jsonReader.beginObject();
  | 
  |             while (jsonReader.hasNext()) {
  |                 String name = jsonReader.nextName();
  | 
  |                 if (jsonReader.peek() == JsonToken.NULL) {
  |                     jsonReader.skipValue();
  |                     continue;
  |                 }
  |                 
  |                 switch (name) {
  each member in members
    if (!member.noGson)
      |                     case "#{member.serializedName || member.name}":
      |                         json#{name}.set#{camelCase(capitalize(member.name))}(m#{member.adapterType}Adapter.read(jsonReader));
      |                         break;
      | 
  |                     default: {
  |                         jsonReader.skipValue();
  |                     }
  |                 }
  |             }
  | 
  |             jsonReader.endObject();
  | 
  |             return json#{name};
  |         }
  | 
  |         @Override
  |         public void write(JsonWriter jsonWriter, #{name} object) throws IOException {
  |             jsonWriter.beginObject();
  | 
  each member in members
    if (!member.noGson)
      - if (member.type.match(/(boolean|short|int|long|float|double)/i))
       |             jsonWriter.name("#{member.serializedName || member.name}");
       |             m#{member.adapterType}Adapter.write(jsonWriter, object.get#{camelCase(capitalize(member.name))}());
       | 
      - else
       |             if (object.get#{camelCase(capitalize(member.name))}() != null) {
       |                 jsonWriter.name("#{member.serializedName || member.name}");
       |                 m#{member.adapterType}Adapter.write(jsonWriter, object.get#{camelCase(capitalize(member.name))}());
       |             }
       | 
  | 
  |             jsonWriter.endObject();
  |         }
  |     }
  | 

mixin classDeclaration
 - if (simpleXml)
   | 
   | @Root(strict=false) 
   | @NamespaceList({ 
   each namespace, i in simpleXmlNamespaces
     +namespace(namespace)
     if i < simpleXmlNamespaces.length - 1
       +comma()
   | })
 - else 
   | 
 - if (parcelable)
   | public class #{name} implements Parcelable {
   | 
 - else
   | public class #{name} {
   | 
