mixin contentUri(model)
 |     public static final Uri #{upperCase(model.name)}_CONTENT_URI = Uri.withAppendedPath(#{capitalize(camelCase(databaseName))}Provider.AUTHORITY_URI, #{model.name}Content.CONTENT_PATH);
 | 

mixin contentUriRelationship(relationship)
 |     public static final Uri #{upperCase(relationship.parent)}_JOIN_#{upperCase(relationship.child)}_CONTENT_URI = Uri.withAppendedPath(#{capitalize(camelCase(databaseName))}Provider.AUTHORITY_URI, #{relationship.parent}Join#{relationship.child}Content.CONTENT_PATH);
 | 

mixin constant(model, i)
 |     private static final int #{upperCase(model.name)}_DIR = #{i * 2};
 |     private static final int #{upperCase(model.name)}_ID = #{(i * 2) + 1};
 | 

mixin constantRelationship(relationship, i)
 |     private static final int #{upperCase(relationship.parent)}_JOIN_#{upperCase(relationship.child)}_DIR = #{i * 2};
 | 

mixin uriMatcher(model)
 |         URI_MATCHER.addURI(AUTHORITY, #{model.name}Content.CONTENT_PATH, #{upperCase(model.name)}_DIR);
 |         URI_MATCHER.addURI(AUTHORITY, #{model.name}Content.CONTENT_PATH + "/#",    #{upperCase(model.name)}_ID);
 | 

mixin uriMatcherRelationship(relationship)
 |         URI_MATCHER.addURI(AUTHORITY, #{relationship.parent}Join#{relationship.child}Content.CONTENT_PATH, #{upperCase(relationship.parent)}_JOIN_#{upperCase(relationship.child)}_DIR);
 | 

mixin contentColumns(model)
 |     public static final class #{model.name}Content implements BaseColumns {
 |         public static final String CONTENT_PATH = "#{lowerCase(model.name)}";
 |         public static final String CONTENT_TYPE = "vnd.android.cursor.dir/vnd.#{databaseName}.#{lowerCase(model.name)}";
 |         public static final String CONTENT_ITEM_TYPE = "vnd.android.cursor.item/vnd.#{databaseName}.#{lowerCase(model.name)}";
 |     }
 | 

mixin contentColumnsRelationship(relationship)
 |     public static final class #{relationship.parent}Join#{relationship.child}Content implements BaseColumns {
 |         public static final String CONTENT_PATH = "#{lowerCase(relationship.parent)}_join_#{lowerCase(relationship.child)}";
 |         public static final String CONTENT_TYPE = "vnd.android.cursor.dir/vnd.#{databaseName}.#{lowerCase(relationship.parent)}_join_#{lowerCase(relationship.child)}";
 |     }
 | 

mixin typeCase(model)
 |             case #{upperCase(model.name)}_DIR:
 |                 return #{model.name}Content.CONTENT_TYPE;
 |             case #{upperCase(model.name)}_ID:
 |                 return #{model.name}Content.CONTENT_ITEM_TYPE;
 | 

mixin typeCaseRelationship(relationship)
 |             case #{upperCase(relationship.parent)}_JOIN_#{upperCase(relationship.child)}_DIR:
 |                 return #{relationship.parent}Join#{relationship.child}Content.CONTENT_TYPE;
 | 

mixin queryCase(model)
 |             case #{upperCase(model.name)}_ID:
 |                 queryBuilder.appendWhere(#{model.name}Table._ID + "=" + uri.getLastPathSegment());
 |             case #{upperCase(model.name)}_DIR:
 |                 queryBuilder.setTables(#{model.name}Table.TABLE_NAME);
 |                 break;
 | 

mixin projectionMap(model, member)
 |                     #{model.name}Table.TABLE_NAME + "." + #{model.name}Table.#{upperCase(member.name)} + " AS " + #{model.name}Table.TABLE_NAME + "_" + #{model.name}Table.#{upperCase(member.name)},
 | 

mixin queryCaseRelationship(relationship)
 |             case #{upperCase(relationship.parent)}_JOIN_#{upperCase(relationship.child)}_DIR:
 |                 queryBuilder.setTables(#{relationship.parent}Table.TABLE_NAME + " LEFT OUTER JOIN " + #{relationship.child}Table.TABLE_NAME + " ON (" + #{relationship.parent}Table.TABLE_NAME + "." + #{relationship.parent}Table.#{upperCase(relationship.parent_column)} + "=" + #{relationship.child}Table.TABLE_NAME + "." + #{relationship.child}Table.#{upperCase(relationship.child_column)} + ")");
 | 
 |                 projection = new String[] {
 - each model in models
   - if (model.name == relationship.parent || model.name == relationship.child)
     |                     #{model.name}Table.TABLE_NAME + "._id AS " + #{model.name}Table.TABLE_NAME + "__id",
     | 
     - each member in model.members
       +projectionMap(model, member)
 |                };
 |                 break;
 | 

mixin insertCase(model)
 |                 case #{upperCase(model.name)}_DIR:
 |                 case #{upperCase(model.name)}_ID:
 |                     final long #{lowerCase(model.name)}Id = dbConnection.insertOrThrow(#{model.name}Table.TABLE_NAME, null, values);
 |                     final Uri new#{model.name}Uri = ContentUris.withAppendedId(#{upperCase(model.name)}_CONTENT_URI, #{lowerCase(model.name)}Id);
 |                     getContext().getContentResolver().notifyChange(new#{model.name}Uri, null);
 - each relationship in relationships
   - if (model.name == relationship.parent || model.name == relationship.child)
     |                     getContext().getContentResolver().notifyChange(#{upperCase(relationship.parent)}_JOIN_#{upperCase(relationship.child)}_CONTENT_URI, null);
     | 
 | 
 |                     dbConnection.setTransactionSuccessful();
 |                     return new#{model.name}Uri;
 | 

mixin updateCase(model)
 |                case #{upperCase(model.name)}_DIR :
 |                    updateCount = dbConnection.update(#{model.name}Table.TABLE_NAME, values, selection, selectionArgs);
 | 
 - each relationship in relationships
   - if (model.name == relationship.parent || model.name == relationship.child)
     |                    joinUris.add(#{upperCase(relationship.parent)}_JOIN_#{upperCase(relationship.child)}_CONTENT_URI);
     | 
 | 
 |                    dbConnection.setTransactionSuccessful();
 |                    break;
 |                case #{upperCase(model.name)}_ID :
 |                    final long #{lowerCase(model.name)}Id = ContentUris.parseId(uri);
 |                    updateCount = dbConnection.update(#{model.name}Table.TABLE_NAME, values, 
 |                        #{model.name}Table._ID + "=" + #{lowerCase(model.name)}Id + (TextUtils.isEmpty(selection) ? "" : " AND (" + selection + ")"), selectionArgs);
 | 
 - each relationship in relationships
   - if (model.name == relationship.parent || model.name == relationship.child)
     |                    joinUris.add(#{upperCase(relationship.parent)}_JOIN_#{upperCase(relationship.child)}_CONTENT_URI);
     | 
 | 
 |                    dbConnection.setTransactionSuccessful();
 |                    break;
 | 

mixin deleteCase(model)
 |                 case #{upperCase(model.name)}_DIR :
 |                     deleteCount = dbConnection.delete(#{model.name}Table.TABLE_NAME, selection, selectionArgs);
 | 
 - each relationship in relationships
   - if (model.name == relationship.parent || model.name == relationship.child)
     |                     joinUris.add(#{upperCase(relationship.parent)}_JOIN_#{upperCase(relationship.child)}_CONTENT_URI);
     | 
 | 
 |                     dbConnection.setTransactionSuccessful();
 |                     break;
 |                 case #{upperCase(model.name)}_ID :
 |                     deleteCount = dbConnection.delete(#{model.name}Table.TABLE_NAME, #{model.name}Table.WHERE_ID_EQUALS, new String[] { uri.getLastPathSegment() });
 | 
 - each relationship in relationships
   - if (model.name == relationship.parent || model.name == relationship.child)
     |                     joinUris.add(#{upperCase(relationship.parent)}_JOIN_#{upperCase(relationship.child)}_CONTENT_URI);
     | 
 | 
 |                     dbConnection.setTransactionSuccessful();
 |                     break;
 | 

| package #{packageName}.provider;
| 
| import #{packageName}.database.#{capitalize(camelCase(databaseName))}Database;
| 
| import #{packageName}.database.table.*;
| 
| import android.provider.BaseColumns;
| import android.text.TextUtils;
| import android.content.ContentUris;
| import android.database.sqlite.SQLiteQueryBuilder;
| 
| import android.content.ContentProvider;
| import android.content.ContentValues;
| import android.content.UriMatcher;
| import android.database.Cursor;
| import android.database.sqlite.SQLiteDatabase;
| import android.net.Uri;
| 
| import java.util.ArrayList;
| import java.util.List;
| 
| public class #{capitalize(camelCase(databaseName))}Provider extends ContentProvider {
|     public static final String AUTHORITY = "#{packageName}.provider.#{databaseName}";
|     public static final Uri AUTHORITY_URI = Uri.parse("content://" + AUTHORITY);
| 
each model in models
 +contentUri(model)
| 
each relationship in relationships
 +contentUriRelationship(relationship)
| 
|     private static final UriMatcher URI_MATCHER;
|     private #{capitalize(camelCase(databaseName))}Database mDatabase;
| 
each model, i in models
 +constant(model, i)
| 
each relationship, i in relationships
 +constantRelationship(relationship, i + models.length)
| 
|     static {
|         URI_MATCHER = new UriMatcher(UriMatcher.NO_MATCH);
| 
each model in models
 +uriMatcher(model)
| 
each relationship in relationships
 +uriMatcherRelationship(relationship)
|    }
| 
each model in models
 +contentColumns(model)
| 
each relationship in relationships
 +contentColumnsRelationship(relationship)
| 
|     @Override
|     public final boolean onCreate() {
|         mDatabase = new #{capitalize(camelCase(databaseName))}Database(getContext());
|         return true;
|     }
| 
|     @Override
|     public final String getType(final Uri uri) {
|         switch (URI_MATCHER.match(uri)) {
each model in models
 +typeCase(model)
| 
each relationship in relationships
 +typeCaseRelationship(relationship)
| 
|             default:
|                 throw new IllegalArgumentException("Unsupported URI: " + uri);
|         }
|     }
| 
|     @Override
|     public final Cursor query(final Uri uri, String[] projection, final String selection, final String[] selectionArgs, final String sortOrder) {
|         final SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();
|         final SQLiteDatabase dbConnection = mDatabase.getReadableDatabase();
| 
|         switch (URI_MATCHER.match(uri)) {
each model in models
 +queryCase(model)
| 
each relationship in relationships
 +queryCaseRelationship(relationship)
| 
|             default :
|                 throw new IllegalArgumentException("Unsupported URI:" + uri);
|         }
| 
|         Cursor cursor = queryBuilder.query(dbConnection, projection, selection, selectionArgs, null, null, sortOrder);
|         cursor.setNotificationUri(getContext().getContentResolver(), uri);
| 
|         return cursor;
| 
|     }
| 
|     @Override
|     public final Uri insert(final Uri uri, final ContentValues values) {
|         final SQLiteDatabase dbConnection = mDatabase.getWritableDatabase();
| 
|         try {
|             dbConnection.beginTransaction();
| 
|             switch (URI_MATCHER.match(uri)) {
each model in models
 +insertCase(model)
| 
|                 default :
|                     throw new IllegalArgumentException("Unsupported URI:" + uri);
|             }
|         } catch (Exception e) {
|             e.printStackTrace();
|         } finally {
|             dbConnection.endTransaction();
|         }
| 
|         return null;
|     }
| 
|     @Override
|     public final int update(final Uri uri, final ContentValues values, final String selection, final String[] selectionArgs) {
|         final SQLiteDatabase dbConnection = mDatabase.getWritableDatabase();
|         int updateCount = 0;
|         List<Uri> joinUris = new ArrayList<Uri>();
| 
|         try {
|             dbConnection.beginTransaction();
| 
|             switch (URI_MATCHER.match(uri)) {
each model in models
 +updateCase(model)
| 
|                 default :
|                     throw new IllegalArgumentException("Unsupported URI:" + uri);
|             }
|         } finally {
|             dbConnection.endTransaction();
|         }
| 
|         if (updateCount > 0) {
|             getContext().getContentResolver().notifyChange(uri, null);
| 
|             for (Uri joinUri : joinUris) {
|                 getContext().getContentResolver().notifyChange(joinUri, null);
|             }
|         }
| 
|         return updateCount;
| 
|     }
| 
|     @Override
|     public final int delete(final Uri uri, final String selection, final String[] selectionArgs) {
|         final SQLiteDatabase dbConnection = mDatabase.getWritableDatabase();
|         int deleteCount = 0;
|         List<Uri> joinUris = new ArrayList<Uri>();
| 
|         try {
|             dbConnection.beginTransaction();
| 
|             switch (URI_MATCHER.match(uri)) {
each model in models
 +deleteCase(model)
| 
|                 default :
|                     throw new IllegalArgumentException("Unsupported URI:" + uri);
|             }
|         } finally {
|             dbConnection.endTransaction();
|         }
| 
|         if (deleteCount > 0) {
|             getContext().getContentResolver().notifyChange(uri, null);
| 
|             for (Uri joinUri : joinUris) {
|                 getContext().getContentResolver().notifyChange(joinUri, null);
|             }
|         }
| 
|         return deleteCount;
|     }
| }